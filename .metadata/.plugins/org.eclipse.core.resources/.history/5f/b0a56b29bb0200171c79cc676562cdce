package Modele;

import java.awt.geom.Point2D;
import java.util.ArrayList;
import java.util.Iterator;
import java.util.List;
import java.util.Vector;

import javax.swing.plaf.SliderUI;

import Interface.Panneau;

public class Pigeon extends Element implements Runnable  {

	private List<Nourriture> listFood;
	protected Panneau pan;
	// Vitesse de déplacement des pigeons
	private int vitessMax = 1;

	// Variables de peur associées aux coordonnées (x,y)
	private int peurX;
	private int peurY;

	public Pigeon(int X, int Y,Panneau panIn) {
		super(X, Y);
		// TODO Auto-generated constructor stub
		// Nos pigeons ne s'intéressent qu'à la nourriture fraiche
		listFood=panIn.getListGoodFood();
		pan = panIn;
	}


	@Override
	public void run() {
		while(true)
		{
			//Possibilité de peur aléatoire si il n'y a pas déjà un état de peur
			if(peurX == 0 && peurY == 0)
			{
				double test = Math.random();
				//1% de chance d'avoir peur par itération 
				if(test < 0.01)
				{
					
					peurX = (int) (((float)Math.random() - 0.5f) * 160);
					peurY = (int) (((float)Math.random() - 0.5f) * 160);
					
					peurX += posX;
					peurY += posY;
					
					
				}
			}

			// Si le pigeon est apeuré
			if(peurX != 0 || peurY !=0)
			{
				// Le pigeon va se déplacer selon vers sa position de peur
				piegonDeplacement(peurX,peurY);
				// Lorsqu'il atteint la position alors il n'a plus peur
				if(peurX == posX && peurY == posY)
				{
					peurX = 0;
					peurY = 0;
				}
			}
			else
			{
				// Si la liste de nourriture est vide alors on attend 17 millisecondes
				if(listFood.isEmpty()==true){
					
				}
				else {
					// On créer un bloc synchronisé pour qu'un seul Thread à la fois accède à ce code.
					synchronized (listFood) {
						Nourriture nourProche; 
						try
						{
							nourProche= listFood.get(0);
						}
						catch(IndexOutOfBoundsException e)
						{
							nourProche = null;
						}
						if(nourProche != null)
						{
							// On cherche la nourriture initialement fraiche la plus proche
							double distanceMin = Point2D.distance(nourProche.getPosX(), nourProche.getPoxY(), getPosX(),getPoxY());
							for (Iterator<Nourriture> iterator=listFood.iterator();iterator.hasNext();) {
								Nourriture nourriture = iterator.next();
								double distance = Point2D.distance(nourriture.getPosX(), nourriture.getPoxY(), getPosX(),getPoxY());
								if(distance<distanceMin){
									distanceMin=distance;
									nourProche=nourriture;
								}
							}
							// Le pigeon se dirige vers la nourriture initialement fraiche la plus proche
							piegonDeplacement(nourProche.getPosX(), nourProche.getPoxY());
							// Si le pigeon a atteint la nourriture alors celle-ci est supprimé de la list de nourriture
							if(posX==nourProche.getPosX() && posY==nourProche.getPoxY())
							{

								listFood.remove(nourProche);

							}
						}
					}
				}
			}



			pan.repaint();
			try {
				// On répète cela toutes les 17 millisecondes pour atteindre 60 images par secondes
				Thread.sleep(17);
			} catch (InterruptedException e) {
				// TODO Auto-generated catch block
				e.printStackTrace();
			}
		}
	}

	// Gère le déplacement des pigeons d'une position initiale à une position finale à une vitesse donnée
	private void piegonDeplacement(int cibleX,int cibleY)
	{
		int deplacementX = posX - cibleX;
		if(deplacementX > vitessMax)
		{
			deplacementX=vitessMax;
		}
		if(deplacementX < -vitessMax)
		{
			deplacementX=-vitessMax;
		}

		int deplacementY = posY - cibleY;
		if(deplacementY > vitessMax)
		{
			deplacementY=vitessMax;
		}
		if(deplacementY < -vitessMax)
		{
			deplacementY=-vitessMax;
		}

		posX-=deplacementX;
		posY-=deplacementY;	
	}

	public List<Nourriture> getListFood() {
		return listFood;
	}


	public void setListFood(List<Nourriture> listFood) {
		this.listFood = listFood;
	}
}
